************************************************************************
Busca binária                                                        **
código em c                                                          **
                                                                     **
************************************************************************

#define MAX 20

int fim = MAX-1;
int ini = 0;

int a[MAX]; //alocação e definição de valores
int pos = (ini+fim) / 2;
int target = 2;

while(ini<=fim){
    if(a[pos] == target){
        return pos;
    }
    if(a[pos]> target){
        fim = pos;
    }
    else
        ini = pos;
    pos = (ini+fim)/2;
}

return -1;


// ************************************************************************
// Busca binária                                                        **
// MIPS intermediário                                                   **
//                                                                      **
// ************************************************************************


	//nro de elementos
	LD R1 0(R0)

	//endereço de inicio, estrutura: nel, el0, el1..., eln-1
	DADDI R2 R0 1

	//constantes visto que não tem shifts implementados
	DADDI R31 R0 1
	DADDI R30 R0 2

	//registrador de retorno (posição i no vetor onde a[i]=alvo, -1 caso contrário)
	DADDI R10 RO -1

	//endereço de fim
	DADDI R3 R1 0
	DSUB R3 R3 R31
	DADD R3 R3 R2

	//pos
	DADD R4 R2 R3
	DDIV R4 R4 R30

	//valor alvo
	LD R5 50(R0)

	//controle do laço: qdo r6 <0 (ini>fim) então saia do laço
loop
	DSUB R6 R3 R2
	BLTZ R6 fim_loop
	DSUB R3 R3 R31

	//a[pos]
	LD R7 0(R4)
    //encontrou a[pos] == target
	BEQ R7 R5 update_sucess 

    //a[pos] > target
	DSUB R7 R7 R5
	BGEZ R7 beq_bgtz

	//else
	DADD R2 R0 R4

beq_bgtz:
	DADD R3 R0 R4
	//JUMP BACK
	//BEQ R0 R0 loop_update

loop_update:
	DADD R4 R2 R3
	DDIV R4 R4 R30


	BGEZ R6 loop





update_sucess:
	DADDI R10 R0 R4
	SD R10 499(R0)


fim_loop: 
	DADD R0 R0 R0
